// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
   id           String   @id @default(cuid())
   name         String   @unique
   email        String?  @unique
   emailVerified DateTime?
   image        String?
   isAdmin      Boolean @default(false)
   accounts     Account[]
   sessions     Session[]
   products     Product[] @relation("OwnedProducts")
   orders       Order[]
   favourited Favourite[]
   seens Seens[]
   @@index(name)
}

model Favourite {
  userName String
  productId String
  user User @relation(fields: [userName], references: [name], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([userName, productId])
  @@index([userName])
  @@index([productId])

}

model Product {
   id String @id @default(cuid())
   name String 
   price Int
   description String?
   popularity Int @default(0)
   isApproved Boolean @default(false)
   categories String[]
   images ProductImage[]
   owner User @relation("OwnedProducts", fields: [ownerId], references: [id])
   ownerId String
   ordered OrderItem[]
   favourited Favourite[]
   characteristics Characteristic[]
   seens Seens[]
   @@index(isApproved)
}

model Characteristic {
    id String @id @default(cuid())
    key String 
    value String
    productId String
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    
    @@index([productId])
}


model ProductImage {
    id String @id @default(cuid())
    url String
    productId String 
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@index([productId])
}

model Seens {
    id String @id @default(uuid())
    userId String
    productId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([userId,productId])
    @@index([userId, productId])
}


model Order {
    id String @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    status     String @default("Active")
    totalPrice Int @default(0)
    customerId String
    customer   User @relation(fields: [customerId], references: [id], onDelete: Cascade)
    products OrderItem[]
}
model OrderItem {
    id         String @id @default(cuid())
    orderId    String
    productId  String
    quantity   Int
    createdAt  DateTime @default(now())

    order      Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}



// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Visitor {
    id String @id @default(uuid())
    ip String @unique()
    comments String? @default("")
}